
SPI_TestApp.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000027e  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  000002f2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000007  00800060  00800060  000002f2  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000002f2  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000324  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000f0  00000000  00000000  00000360  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000bd3  00000000  00000000  00000450  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000807  00000000  00000000  00001023  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000081e  00000000  00000000  0000182a  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000204  00000000  00000000  00002048  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000004ca  00000000  00000000  0000224c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000658  00000000  00000000  00002716  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000b0  00000000  00000000  00002d6e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   8:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  28:	0c 94 c0 00 	jmp	0x180	; 0x180 <__vector_10>
  2c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	20 e0       	ldi	r18, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	a7 36       	cpi	r26, 0x67	; 103
  6c:	b2 07       	cpc	r27, r18
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 3e 00 	call	0x7c	; 0x7c <main>
  74:	0c 94 3d 01 	jmp	0x27a	; 0x27a <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <main>:
#include "../MCAL/TIMER0/TIMER0.h"
#include "../MCAL/DIO/DIO.h"
#include "../MCAL/UART/UART.h"

int main(void)
{
  7c:	cf 93       	push	r28
  7e:	df 93       	push	r29
  80:	1f 92       	push	r1
  82:	cd b7       	in	r28, 0x3d	; 61
  84:	de b7       	in	r29, 0x3e	; 62
	SPI_u8Init(MASTER);
  86:	80 e0       	ldi	r24, 0x00	; 0
  88:	0e 94 54 00 	call	0xa8	; 0xa8 <SPI_u8Init>
	UART_u8Init();
  8c:	0e 94 0a 01 	call	0x214	; 0x214 <UART_u8Init>
	TIMER0_u8Init();
  90:	0e 94 9e 00 	call	0x13c	; 0x13c <TIMER0_u8Init>
	uint8_t S_char  = 0xFF ;
  94:	8f ef       	ldi	r24, 0xFF	; 255
  96:	89 83       	std	Y+1, r24	; 0x01
	while (1)
	{
		UART_u8ReceiveByte(&S_char);
  98:	ce 01       	movw	r24, r28
  9a:	01 96       	adiw	r24, 0x01	; 1
  9c:	0e 94 32 01 	call	0x264	; 0x264 <UART_u8ReceiveByte>
		SPI_SendByte(S_char);
  a0:	89 81       	ldd	r24, Y+1	; 0x01
  a2:	0e 94 94 00 	call	0x128	; 0x128 <SPI_SendByte>
  a6:	f8 cf       	rjmp	.-16     	; 0x98 <main+0x1c>

000000a8 <SPI_u8Init>:
 * return      : SPI_Init_Error or STD_TYPES_OK in uint8_t    
 */
uint8_t SPI_u8Init(uint8_t SPI_MODE)
{
	uint8_t u8ErrorState = STD_TYPES_OK ;
	if ( SPI_MODE == MASTER )
  a8:	81 11       	cpse	r24, r1
  aa:	1d c0       	rjmp	.+58     	; 0xe6 <SPI_u8Init+0x3e>
	{
		SPCR_REG |= SPI_PRESCALER ;				// set prescaler 
  ac:	8d b1       	in	r24, 0x0d	; 13
  ae:	82 60       	ori	r24, 0x02	; 2
  b0:	8d b9       	out	0x0d, r24	; 13
		CLR_BIT(SPSR_REG,SPI2X_BIT);			// clear duple speed bit 
  b2:	8e b1       	in	r24, 0x0e	; 14
  b4:	8e 7f       	andi	r24, 0xFE	; 254
  b6:	8e b9       	out	0x0e, r24	; 14
		SET_BIT(SPCR_REG,MSTR_BIT);				// Set MSTR to Master Mode
  b8:	8d b1       	in	r24, 0x0d	; 13
  ba:	80 61       	ori	r24, 0x10	; 16
  bc:	8d b9       	out	0x0d, r24	; 13
		CLR_BIT(SPCR_REG,DORD_BIT);				// Send MSB First		
  be:	8d b1       	in	r24, 0x0d	; 13
  c0:	8f 7d       	andi	r24, 0xDF	; 223
  c2:	8d b9       	out	0x0d, r24	; 13
		SET_BIT(SPCR_REG,SPE_BIT);				// start SPI module 
  c4:	8d b1       	in	r24, 0x0d	; 13
  c6:	80 64       	ori	r24, 0x40	; 64
  c8:	8d b9       	out	0x0d, r24	; 13
		// set direction of SPI pins 
		SET_BIT(DDRB_REG,SPI_SCK_PIN);
  ca:	87 b3       	in	r24, 0x17	; 23
  cc:	80 68       	ori	r24, 0x80	; 128
  ce:	87 bb       	out	0x17, r24	; 23
		SET_BIT(DDRB_REG,SPI_MOSI_PIN);
  d0:	87 b3       	in	r24, 0x17	; 23
  d2:	80 62       	ori	r24, 0x20	; 32
  d4:	87 bb       	out	0x17, r24	; 23
		SET_BIT(DDRB_REG,SPI_SS_PIN);
  d6:	87 b3       	in	r24, 0x17	; 23
  d8:	80 61       	ori	r24, 0x10	; 16
  da:	87 bb       	out	0x17, r24	; 23
		CLR_BIT(DDRB_REG,SPI_MISO_PIN);
  dc:	87 b3       	in	r24, 0x17	; 23
  de:	8f 7b       	andi	r24, 0xBF	; 191
  e0:	87 bb       	out	0x17, r24	; 23
 * Arguments   : void
 * return      : SPI_Init_Error or STD_TYPES_OK in uint8_t    
 */
uint8_t SPI_u8Init(uint8_t SPI_MODE)
{
	uint8_t u8ErrorState = STD_TYPES_OK ;
  e2:	80 e0       	ldi	r24, 0x00	; 0
  e4:	08 95       	ret
		SET_BIT(DDRB_REG,SPI_SCK_PIN);
		SET_BIT(DDRB_REG,SPI_MOSI_PIN);
		SET_BIT(DDRB_REG,SPI_SS_PIN);
		CLR_BIT(DDRB_REG,SPI_MISO_PIN);
	}
	else if ( SPI_MODE == SLAVE )
  e6:	81 30       	cpi	r24, 0x01	; 1
  e8:	e9 f4       	brne	.+58     	; 0x124 <SPI_u8Init+0x7c>
	{
		SPCR_REG |= SPI_PRESCALER ;					// set prescaler 
  ea:	8d b1       	in	r24, 0x0d	; 13
  ec:	82 60       	ori	r24, 0x02	; 2
  ee:	8d b9       	out	0x0d, r24	; 13
		CLR_BIT(SPSR_REG,SPI2X_BIT);				// clear duple speed bit
  f0:	8e b1       	in	r24, 0x0e	; 14
  f2:	8e 7f       	andi	r24, 0xFE	; 254
  f4:	8e b9       	out	0x0e, r24	; 14
		CLR_BIT(SPCR_REG,MSTR_BIT);					// clear MSTR to SLAVE Mode
  f6:	8d b1       	in	r24, 0x0d	; 13
  f8:	8f 7e       	andi	r24, 0xEF	; 239
  fa:	8d b9       	out	0x0d, r24	; 13
		CLR_BIT(SPCR_REG,DORD_BIT);					// Send MSB First				
  fc:	8d b1       	in	r24, 0x0d	; 13
  fe:	8f 7d       	andi	r24, 0xDF	; 223
 100:	8d b9       	out	0x0d, r24	; 13
		SET_BIT(SPCR_REG,SPE_BIT);					// start SPI module 	
 102:	8d b1       	in	r24, 0x0d	; 13
 104:	80 64       	ori	r24, 0x40	; 64
 106:	8d b9       	out	0x0d, r24	; 13
		// set direction of SPI pins 
		CLR_BIT(DDRB_REG,SPI_SCK_PIN);
 108:	87 b3       	in	r24, 0x17	; 23
 10a:	8f 77       	andi	r24, 0x7F	; 127
 10c:	87 bb       	out	0x17, r24	; 23
		CLR_BIT(DDRB_REG,SPI_MOSI_PIN);
 10e:	87 b3       	in	r24, 0x17	; 23
 110:	8f 7d       	andi	r24, 0xDF	; 223
 112:	87 bb       	out	0x17, r24	; 23
		CLR_BIT(DDRB_REG,SPI_SS_PIN);
 114:	87 b3       	in	r24, 0x17	; 23
 116:	8f 7e       	andi	r24, 0xEF	; 239
 118:	87 bb       	out	0x17, r24	; 23
		SET_BIT(DDRB_REG,SPI_MISO_PIN);	
 11a:	87 b3       	in	r24, 0x17	; 23
 11c:	80 64       	ori	r24, 0x40	; 64
 11e:	87 bb       	out	0x17, r24	; 23
 * Arguments   : void
 * return      : SPI_Init_Error or STD_TYPES_OK in uint8_t    
 */
uint8_t SPI_u8Init(uint8_t SPI_MODE)
{
	uint8_t u8ErrorState = STD_TYPES_OK ;
 120:	80 e0       	ldi	r24, 0x00	; 0
 122:	08 95       	ret
		CLR_BIT(DDRB_REG,SPI_MOSI_PIN);
		CLR_BIT(DDRB_REG,SPI_SS_PIN);
		SET_BIT(DDRB_REG,SPI_MISO_PIN);	
	}
	else 
		u8ErrorState = SPI_Init_Error ;
 124:	81 e9       	ldi	r24, 0x91	; 145
	return u8ErrorState ;
}
 126:	08 95       	ret

00000128 <SPI_SendByte>:

void SPI_SendByte(uint8_t S_Byte)
{
	CLR_BIT(PORTB_REG,SPI_SS_PIN);
 128:	98 b3       	in	r25, 0x18	; 24
 12a:	9f 7e       	andi	r25, 0xEF	; 239
 12c:	98 bb       	out	0x18, r25	; 24
	SPDR_REG = S_Byte ;											// load data to SPDR REG
 12e:	8f b9       	out	0x0f, r24	; 15
	while ( GET_BIT(SPSR_REG,SPIF_BIT) == 0);				// stay to transfer be done 
 130:	77 9b       	sbis	0x0e, 7	; 14
 132:	fe cf       	rjmp	.-4      	; 0x130 <SPI_SendByte+0x8>
	SET_BIT(PORTB_REG,SPI_SS_PIN);
 134:	88 b3       	in	r24, 0x18	; 24
 136:	80 61       	ori	r24, 0x10	; 16
 138:	88 bb       	out	0x18, r24	; 24
 13a:	08 95       	ret

0000013c <TIMER0_u8Init>:
		TIMER0_u8Stop();
		delay_state = DELAY_AVAILABLE;
		u8ErrorState = STD_TYPES_OK ;
	}
	return u8ErrorState ;
}
 13c:	83 b7       	in	r24, 0x33	; 51
 13e:	8f 7b       	andi	r24, 0xBF	; 191
 140:	83 bf       	out	0x33, r24	; 51
 142:	83 b7       	in	r24, 0x33	; 51
 144:	88 60       	ori	r24, 0x08	; 8
 146:	83 bf       	out	0x33, r24	; 51
 148:	8f b7       	in	r24, 0x3f	; 63
 14a:	80 68       	ori	r24, 0x80	; 128
 14c:	8f bf       	out	0x3f, r24	; 63
 14e:	89 b7       	in	r24, 0x39	; 57
 150:	82 60       	ori	r24, 0x02	; 2
 152:	89 bf       	out	0x39, r24	; 57
 154:	03 b6       	in	r0, 0x33	; 51
 156:	06 fc       	sbrc	r0, 6
 158:	0b c0       	rjmp	.+22     	; 0x170 <TIMER0_u8Init+0x34>
 15a:	03 b6       	in	r0, 0x33	; 51
 15c:	03 fe       	sbrs	r0, 3
 15e:	0a c0       	rjmp	.+20     	; 0x174 <TIMER0_u8Init+0x38>
 160:	0f b6       	in	r0, 0x3f	; 63
 162:	07 fe       	sbrs	r0, 7
 164:	09 c0       	rjmp	.+18     	; 0x178 <TIMER0_u8Init+0x3c>
 166:	09 b6       	in	r0, 0x39	; 57
 168:	01 fc       	sbrc	r0, 1
 16a:	08 c0       	rjmp	.+16     	; 0x17c <TIMER0_u8Init+0x40>
 16c:	81 e4       	ldi	r24, 0x41	; 65
 16e:	08 95       	ret
 170:	81 e4       	ldi	r24, 0x41	; 65
 172:	08 95       	ret
 174:	81 e4       	ldi	r24, 0x41	; 65
 176:	08 95       	ret
 178:	81 e4       	ldi	r24, 0x41	; 65
 17a:	08 95       	ret
 17c:	80 e0       	ldi	r24, 0x00	; 0
 17e:	08 95       	ret

00000180 <__vector_10>:

// ISR 
void __vector_10(void)
{
 180:	1f 92       	push	r1
 182:	0f 92       	push	r0
 184:	0f b6       	in	r0, 0x3f	; 63
 186:	0f 92       	push	r0
 188:	11 24       	eor	r1, r1
 18a:	2f 93       	push	r18
 18c:	3f 93       	push	r19
 18e:	4f 93       	push	r20
 190:	5f 93       	push	r21
 192:	6f 93       	push	r22
 194:	7f 93       	push	r23
 196:	8f 93       	push	r24
 198:	9f 93       	push	r25
 19a:	af 93       	push	r26
 19c:	bf 93       	push	r27
 19e:	ef 93       	push	r30
 1a0:	ff 93       	push	r31
	counter++;            // increment counter to compare with delay 
 1a2:	80 91 63 00 	lds	r24, 0x0063	; 0x800063 <counter>
 1a6:	90 91 64 00 	lds	r25, 0x0064	; 0x800064 <counter+0x1>
 1aa:	01 96       	adiw	r24, 0x01	; 1
 1ac:	90 93 64 00 	sts	0x0064, r25	; 0x800064 <counter+0x1>
 1b0:	80 93 63 00 	sts	0x0063, r24	; 0x800063 <counter>
	if(counter == compare && delayCallBack != NULL)				// if delay finished and there function address to call  
 1b4:	20 91 63 00 	lds	r18, 0x0063	; 0x800063 <counter>
 1b8:	30 91 64 00 	lds	r19, 0x0064	; 0x800064 <counter+0x1>
 1bc:	80 91 65 00 	lds	r24, 0x0065	; 0x800065 <compare>
 1c0:	90 91 66 00 	lds	r25, 0x0066	; 0x800066 <compare+0x1>
 1c4:	28 17       	cp	r18, r24
 1c6:	39 07       	cpc	r19, r25
 1c8:	a1 f4       	brne	.+40     	; 0x1f2 <__vector_10+0x72>
 1ca:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 1ce:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 1d2:	89 2b       	or	r24, r25
 1d4:	71 f0       	breq	.+28     	; 0x1f2 <__vector_10+0x72>
	{
		counter = 0;
 1d6:	10 92 64 00 	sts	0x0064, r1	; 0x800064 <counter+0x1>
 1da:	10 92 63 00 	sts	0x0063, r1	; 0x800063 <counter>
		CLR_BIT(TIMSK_REG, OCIE0);							// reset interrupt 
 1de:	89 b7       	in	r24, 0x39	; 57
 1e0:	8d 7f       	andi	r24, 0xFD	; 253
 1e2:	89 bf       	out	0x39, r24	; 57
		delay_state = DELAY_AVAILABLE ;
 1e4:	10 92 62 00 	sts	0x0062, r1	; 0x800062 <delay_state>
		delayCallBack();									// call the function 
 1e8:	e0 91 60 00 	lds	r30, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 1ec:	f0 91 61 00 	lds	r31, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 1f0:	09 95       	icall
	}
 1f2:	ff 91       	pop	r31
 1f4:	ef 91       	pop	r30
 1f6:	bf 91       	pop	r27
 1f8:	af 91       	pop	r26
 1fa:	9f 91       	pop	r25
 1fc:	8f 91       	pop	r24
 1fe:	7f 91       	pop	r23
 200:	6f 91       	pop	r22
 202:	5f 91       	pop	r21
 204:	4f 91       	pop	r20
 206:	3f 91       	pop	r19
 208:	2f 91       	pop	r18
 20a:	0f 90       	pop	r0
 20c:	0f be       	out	0x3f, r0	; 63
 20e:	0f 90       	pop	r0
 210:	1f 90       	pop	r1
 212:	18 95       	reti

00000214 <UART_u8Init>:
	/*send byte*/
	UDR_REG = data ;
	if ( UDR_REG != data )
		u8ErrorState = UART_SendByte_Error ;
	return u8ErrorState ;
}
 214:	8a b1       	in	r24, 0x0a	; 10
 216:	80 61       	ori	r24, 0x10	; 16
 218:	8a b9       	out	0x0a, r24	; 10
 21a:	54 9b       	sbis	0x0a, 4	; 10
 21c:	02 c0       	rjmp	.+4      	; 0x222 <UART_u8Init+0xe>
 21e:	80 e0       	ldi	r24, 0x00	; 0
 220:	01 c0       	rjmp	.+2      	; 0x224 <UART_u8Init+0x10>
 222:	81 e8       	ldi	r24, 0x81	; 129
 224:	9a b1       	in	r25, 0x0a	; 10
 226:	98 60       	ori	r25, 0x08	; 8
 228:	9a b9       	out	0x0a, r25	; 10
 22a:	53 9b       	sbis	0x0a, 3	; 10
 22c:	81 e8       	ldi	r24, 0x81	; 129
 22e:	90 b5       	in	r25, 0x20	; 32
 230:	90 68       	ori	r25, 0x80	; 128
 232:	90 bd       	out	0x20, r25	; 32
 234:	57 9b       	sbis	0x0a, 7	; 10
 236:	81 e8       	ldi	r24, 0x81	; 129
 238:	90 b5       	in	r25, 0x20	; 32
 23a:	9f 7b       	andi	r25, 0xBF	; 191
 23c:	90 bd       	out	0x20, r25	; 32
 23e:	56 99       	sbic	0x0a, 6	; 10
 240:	81 e8       	ldi	r24, 0x81	; 129
 242:	90 b5       	in	r25, 0x20	; 32
 244:	90 bd       	out	0x20, r25	; 32
 246:	90 b5       	in	r25, 0x20	; 32
 248:	97 7f       	andi	r25, 0xF7	; 247
 24a:	90 bd       	out	0x20, r25	; 32
 24c:	90 b5       	in	r25, 0x20	; 32
 24e:	96 60       	ori	r25, 0x06	; 6
 250:	90 bd       	out	0x20, r25	; 32
 252:	90 b5       	in	r25, 0x20	; 32
 254:	9f 77       	andi	r25, 0x7F	; 127
 256:	90 bd       	out	0x20, r25	; 32
 258:	57 99       	sbic	0x0a, 7	; 10
 25a:	81 e8       	ldi	r24, 0x81	; 129
 25c:	10 bc       	out	0x20, r1	; 32
 25e:	93 e3       	ldi	r25, 0x33	; 51
 260:	99 b9       	out	0x09, r25	; 9
 262:	08 95       	ret

00000264 <UART_u8ReceiveByte>:
 */
uint8_t UART_u8ReceiveByte(uint8_t * data)
{
	uint8_t u8ErrorState = STD_TYPES_OK ;
	// pointer passed to function not equal NULL
	if ( data == NULL )
 264:	00 97       	sbiw	r24, 0x00	; 0
 266:	39 f0       	breq	.+14     	; 0x276 <UART_u8ReceiveByte+0x12>
		u8ErrorState = UART_ReceiveByte_Error ;
	else
	{
		/*wait while previous transition is complete*/
		while ( (GET_BIT(UCSRA_REG,RXC_BIT)) == 0 );
 268:	5f 9b       	sbis	0x0b, 7	; 11
 26a:	fe cf       	rjmp	.-4      	; 0x268 <UART_u8ReceiveByte+0x4>
		/*send byte*/
		*data = UDR_REG  ;
 26c:	2c b1       	in	r18, 0x0c	; 12
 26e:	fc 01       	movw	r30, r24
 270:	20 83       	st	Z, r18
 * Arguments   : pointer to Char to save the received char 
 * return      : UART_ReceiveByte_Error or STD_TYPES_OK in uint8_t    
 */
uint8_t UART_u8ReceiveByte(uint8_t * data)
{
	uint8_t u8ErrorState = STD_TYPES_OK ;
 272:	80 e0       	ldi	r24, 0x00	; 0
 274:	08 95       	ret
	// pointer passed to function not equal NULL
	if ( data == NULL )
		u8ErrorState = UART_ReceiveByte_Error ;
 276:	83 e8       	ldi	r24, 0x83	; 131
		while ( (GET_BIT(UCSRA_REG,RXC_BIT)) == 0 );
		/*send byte*/
		*data = UDR_REG  ;
	}
	return u8ErrorState ;
}
 278:	08 95       	ret

0000027a <_exit>:
 27a:	f8 94       	cli

0000027c <__stop_program>:
 27c:	ff cf       	rjmp	.-2      	; 0x27c <__stop_program>
